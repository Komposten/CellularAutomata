================
** 2017-08-26 **
================
- Fixed a NullPointerException in CellData.setColor(), that occurred if vertexData had been set to null.
- Added CameraInputReader, and fixed the mouse input code.


================
** 2017-08-24 **
================
- GridMesh3D2 now uses Coordinate objects as keys to the cells map instead of Integers (slightly higher .equals()/.hashCode() time), but reduces need of getIndex().
- Min, max and avg fps are now also shown in debug mode.
- GridMesh3D2 now pre-calculates its vertices (again) and stores them in the HashMap. (= could get rid of the always-max-size FloatArray.)
- Removal and addition of cells now set an "isDirty" flag to tell refreshMesh() to run createVertexArray().
- Updating cells (e.g. changing type or colour) will update the values in the existing vertex array without having to recreate it.
- GridMesh3D2.getCoordinates() now returns a Coordinate instance rather than an int[].


================
** 2017-08-23 **
================
- Moved addVertices() and addVertex() from GridMesh3D2 to a new class called VertexFactory. Also renamed addVertices() to addFaces().
- Added VALUES_PER_VERTEX, VERTICES_PER_FACE, FACES_PER_CELL, VERTICES_PER_CELL and VERTEX_ATTRIBUTES to VertexFactory (to avoid dependencies to Cell3D and Vertex).
- Added a Face enum to VertexFactory (to avoid dependencies to Cell3D).
- GridMesh3D2.updateCell(int, int, int, int) now properly handles addition, removal and updating of cells.
- Added normals to VertexFactory.
- Slight optimisation of memory and speed of GridMesh3D2 and VertexFactory.
- Added hasCell() and as well as "index versions" of add/remove/updateCell.
- Added PredatorPrey3D (currently implemented in Application rather than Engine).
- It is now possible to choose whether or not GridMesh3D2 should be filled with cells from the start.


================
** 2017-08-22 **
================
- Application now enables GL_CULL_FACE and GL_DEPTH_TEST before drawing the GridMesh3D, and disables them afterwards.
- Application now clears the depth buffer using glClear().
- Added various getters to GridMesh3D to more easily track it with the camera.
- Fixed incorrect labelling and colouring of the "planes"/"sides" in Cell3D.
- Fixed the texture coordinates set by Cell3D.
- Fixed GridMesh3D setting maxVertices way too high ("vertices * VALUES_PER_VERTEX" rather than just "vertices").
- GridMesh3D now throws an exception if the requested size is too large (i.e. cannot be fit in a single mesh).
- Added cell and face visibility flags to Cell3D.
- GridMesh3D now hides all Cell faces that are put against each other (visible neighbouring blocks).
- GridMesh3D now uses a FloatArray object to store its vertices, to facilitate future removal and addition of vertices.
- Added getCoordinates() to GridMesh3D.
- Added GridMesh3D2 (GridMesh3D uses a Cell3D[] and a FloatArray to store data, GridMesh3D2 uses a HashMap<int, short[]>). Successfully reduced memory footprint by ~80-85% and sped up initialisation by 15 times.
- Added bitmasks to Cell3D.Face.


================
** 2017-08-21 **
================
- Created the abstract Automata class.
- Added GridMesh (similar to IndexGridMesh, but uses only vertices and no indices).
- Added PixPredatoryPrey.
- Added input handling to toggle debug info.
- Added input handling to change between available automata.
- Moved PredatorPrey, PixPredatorPrey and Organism to a separate package.
- Added SimpleEvolution and EvolvingOrganism.
- Added "renderText(BitmapFont)" to Engine and Automata.
- Cameras are now passed to Automata, so that they can control them/chose what camera to use.
- Renamed Automata to Automaton.

- Started working on GridMesh3D and Cell3D. Mesh is created properly and works for singular cells. Multiple cells give culling problems for all cells except the one at (0; 0; 0).


================
** 2017-08-20 **
================
- Created the project.
- Added Application, Engine, ShaderFactory, AbstractMesh, Cell, IndexGridMesh, IndexGridMesh, Triangle, Vertex, Organism, and PredatorPrey.
